{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","text","status","currentTodos","selectUser","selectStatus","filterByTitle","changeStatus","className","htmlFor","type","name","id","placeholder","value","onChange","event","target","map","todo","classNames","completed","key","checked","title","onClick","userId","CurrentUser","userClear","useState","setSelectUser","useEffect","fetch","then","json","getUser","users","data","email","phone","App","todos","setTodos","filteredTodos","setFilteredTodos","selectedUserId","setSelectedUserId","addText","setStatus","list","listFromServer","filter","item","currentStatus","arrayTodos","query","result","includes","textContent","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.295cf60e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({ text,\n  status,\n  currentTodos,\n  selectUser,\n  selectStatus,\n  filterByTitle,\n  changeStatus,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <label htmlFor=\"search\">Search your todo: </label>\n    <input\n      type=\"text\"\n      name=\"search\"\n      id=\"search\"\n      placeholder=\"Todo title\"\n      value={text}\n      onChange={(event) => {\n        const { value } = event.target;\n\n        filterByTitle(value);\n      }}\n    />\n    <select\n      className=\"TodoList__select\"\n      value={status}\n      onChange={(event) => {\n        const { value } = event.target;\n\n        selectStatus(value);\n      }}\n    >\n      <option value=\"All\">All</option>\n      <option value=\"Active\">Active</option>\n      <option value=\"Completed\">Completed</option>\n    </select>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {currentTodos.map(todo => (\n          <li\n            className={classNames('TodoList__item',\n              {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => changeStatus(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n              onClick={selectUser}\n            >\n              User&nbsp;#{todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  currentTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectStatus: PropTypes.func.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport const CurrentUser = ({ userId, userClear }) => {\n  const [selectUser, setSelectUser] = useState({});\n\n  useEffect(() => {\n    debugger;\n    getUser(userId)\n      .then(users => setSelectUser(users.data));\n  }, [userId]);\n\n  const { name, email, phone } = selectUser;\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{name}</h3>\n      <p className=\"CurrentUser__email\">{email}</p>\n      <p className=\"CurrentUser__phone\">{phone}</p>\n      <button\n        type=\"button\"\n        className=\"button CurrentUser__clear\"\n        onClick={userClear}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.string.isRequired,\n  userClear: PropTypes.func.isRequired,\n\n};\n","const todosFromServer = 'https://mate-api.herokuapp.com/todos';\nconst usersFromServer = 'https://mate-api.herokuapp.com/users/';\n\nexport function getTodos() {\n  return fetch(todosFromServer)\n    .then(todo => todo.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${usersFromServer}${userId}`)\n    .then(todo => todo.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport { getTodos } from './api/api';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [text, addText] = useState('');\n  const [status, setStatus] = useState('All');\n\n  useEffect(() => {\n    getTodos()\n      .then((list) => {\n        const listFromServer\n          = list.data.filter(item => item.title && item.id && item.userId);\n\n        setTodos(listFromServer);\n        setFilteredTodos(listFromServer);\n      });\n  }, []);\n\n  const selectUser = (event) => {\n    setSelectedUserId(event.target.textContent);\n  };\n\n  const userClear = () => {\n    setSelectedUserId('');\n  };\n\n  const filterByTitle = (value) => {\n    let result = [];\n\n    addText(value);\n    result = selectStatus(status, todos, value);\n    setFilteredTodos(result);\n  };\n\n  const selectStatus = (currentStatus, arrayTodos = todos, query = text) => {\n    setStatus(currentStatus);\n    let result = [];\n\n    switch (currentStatus) {\n      case 'Active':\n        result = arrayTodos.filter(todo => !todo.completed);\n\n        if (query) {\n          result = result.filter(todo => todo.title.includes(query));\n        }\n\n        setFilteredTodos(result);\n\n        return result;\n      case 'Completed':\n        result = arrayTodos.filter(todo => todo.completed);\n\n        if (query) {\n          result = result.filter(todo => todo.title.includes(query));\n        }\n\n        setFilteredTodos(result);\n\n        return result;\n      default:\n        if (query) {\n          result = arrayTodos.filter(todo => todo.title.includes(query));\n          setFilteredTodos(result);\n\n          return result;\n        }\n\n        setFilteredTodos(todos);\n\n        return todos;\n    }\n  };\n\n  const changeStatus = (id) => {\n    setFilteredTodos(filteredTodos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          text={text}\n          status={status}\n          currentTodos={filteredTodos}\n          selectUser={selectUser}\n          selectStatus={selectStatus}\n          filterByTitle={filterByTitle}\n          changeStatus={changeStatus}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId.match(/\\d$/)[0]}\n              userClear={userClear}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}